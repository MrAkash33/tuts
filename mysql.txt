-- DDL 
-- ALTER,DROP,CREATE,TRUNCATE

-- DML
-- INSERT,UPDATE,DELETE

-- DQL
-- SELECT

-- TCL
-- COMMIT,ROLLBACK,SAVEPOINT

-- DCL
-- GRANT,REVOKE


-- select @@sql_mode;                                                                                                                 
-- set sql_mode = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- insert into newTable (id,name) values(4,'rahul');
-- insert into newTable values(5,'RMANM','Op');
-- SELECT * from newTable;
-- show databases;
-- use akash;
-- select * from newTable where name='rahul';
-- select * from newTable where name='rahul' or name='akash';
-- select name from newTable;
-- select * from newTable order by name 
-- select * from newTable order by name desc;
-- alter table newTable add column MobNumber int(9);
-- select * from newTable;
-- show columns from newTable;
-- describe newTable;
-- insert into newTable values(5,'gayas','Rj',01234567891);
-- alter table newTable drop column MobNumber;
-- alter table newTable add column ss int(44);
-- alter table newTable rename column ss to Hello;
-- ALTER TABLE `live_score` CHANGE `rrr` `required_run_rate` VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL;
-- alter table newTable modify column Hello varchar(22);  modify with data types
-- show tables;
-- select * from oldtable;
-- delete from oldtable where name = 'Akash'; deleted one row
-- create database man;
-- show databases;
-- drop database man;
-- truncate table oldtable; delete all rows from table but not structure
-- use man;
-- create table tableOne(select * from akash.newTable);
 -- INSERT INTO man.Table1 SELECT * from akash.newTable;
-- use akash;
-- select * from man.tableOne;
-- select * from oldtable;
-- select email from person where email is Null;
-- select email from person where email is NOT Null;
-- select * from person;
-- UPDATE person set email =  'akash@real11.com' where id =1;
-- update person set gender = "male"; all record updated
-- select * from person limit 5;  this is for limit
-- select Min(id) as Lowid from person;
-- select count(email) from person where gender = "male";
-- select sum(id) from person;
-- select * from person;      
-- delete from person where id = 1;
-- select * from person where email LIKE 'a%'; search from end "a";
-- select * from person where email LIKE '%a'; search from start "a";
-- select * from person where email LIKE '%a%'; search from all string;
-- select * from person where email LIKE '_a%'; search from first string a;
-- select * from person where email LIKE '__a%'; search from second string aa;
-- select * from person where email LIKE 'a_%'; search from first end string a;
-- SELECT * FROM Products WHERE Price BETWEEN 10 AND 30;
-- select * from person where REGEXP  "khan$ | poor";

-- NOT NULL
-- UNIQUE
-- DEFAULT
-- CHECK

-- PRIMARY KEY
--     -PRIMARY KEY ALWAYS HAS UNIQUE DATA.
--     -CANNOT HAVE NULL VALUE.
--     -A TABLE CAN CONTAIN ONLY ONE PRIMARY KEY CONSTAINTS.
-- FOREIGN KEY
       -foreign key is a column where in other table this foreign is primary key
       - the table with foreign key is called child table

-- use akash;
-- create table user( id int NOT NULL auto_increment, name varchar(50) NOT NULL , age int NOT Null,city varchar(10) not null, primary key(id));
-- select * from user;
-- create database newdb;
-- use newdb;
-- create table city(cid int not null auto_increment,cityname varchar(30) not null, primary key(cid));
-- select * from city;
-- insert into city(cityname)values('agra'),('delhi'),('patna'),('jaipur'),('noida');
-- create table personal (
-- 	id int not null,
--     name varchar(20) not null,
--     percentage int not null,
--     age int not null,
--     gender varchar(40) not null,
--     city int not null,
--     primary key (id),
--     foreign key(city) references city(cid)
-- );
-- insert into personal(id,name,percentage,age,gender,city) values(5,'ayush',89,19,'m',4),(6,'aman',89,19,'m',5),(7,'naman',89,19,'m',3),(8,'udit',89,19,'m',1);

-- select * from personal;
-- select * from city;
-- describe personal;

-- INNER JOIN
-- select * from personal INNER JOIN city
-- ON personal.city =city.cid;

-- select p.id,p.name,p.age,p.gender,c.cityname
-- from personal p JOIN city c
-- ON p.city =c.cid
-- where p.id = 1;

-- select * from personal p left join city c 
-- on p.city = c.cid
-- select cityname from personal Cross Join city limit 3; create both table combinations


-- Join three table

-- create table users (id int not null auto_increment, name varchar(20), age int not null,courses int not null, city int not null ,primary key(id));
-- alter table users add foreign key(city) references village(vid);
-- alter table users add foreign key(courses) references courses(cid)

-- create table village(vid int not null, villageName varchar(55));
-- alter table village add primary key(vid);
-- create table courses(cid int not null auto_increment,courses varchar(55) not null ,primary key(cid));

-- insert into users(name,age,courses,city) values('akash',22,)
-- describe users

-- create database demo;
-- use demo;
-- alter table newTable add column ss int(44);
-- create table one(id int not null auto_increment, name varchar(55) not null,primary key(id));
-- show databases;
-- describe techteam;
-- use demo;
-- alter table one add column designation varchar(55);

-- insert into one (name,designation) values('udit','Tester'),('himanshu','dev');
-- select * from one;

-- create table BA(daId int not null auto_increment,name varchar(55) not null, designation varchar(55), primary key(daId));
-- create table CA(mId int not null auto_increment,name varchar(55) not null, designation varchar(55), primary key(mId));
-- insert into BA(name,designation) values ('Deepak','Email Marketing'),('Aman','CSE'),('Hemant','SEO'),('Ashish','Graphics');
-- insert into CA(name,designation) values ('Abhishek','Da'),('Mahip','Da'),('Raj','Da'),('Dharmendra','Da');
-- alter table one add column mId int(55);
-- describe techteam;
-- alter table Ca add column daId int(55) not null;
-- alter table users add CONSTRAINT foreign key(courses) references courses(cid)
-- alter table one add foreign key(mId) references Ca(mId);
-- describe Marketing;
-- alter table techteam modify column mId foreign key(mId) refrences Marketing(mId);
-- describe one;
-- use demo;
-- drop database demo;
-- create database demo;
-- use demo;
-- create table table1(id int not null auto_increment ,name varchar(55) not null, age int not null, primary key(id));
-- insert into table1 (name) values ('akash'),('himanshu'),('mahp');
-- create table table2(infoid int not null auto_increment, designation varchar(55) , primary key(infoid));
-- alter table table1 add column (infoid int(55) not null);
 -- insert into table2 (designation) values ('developer'),('fullstack'),('da');
-- alter table table1 add foreign key(infoid) references table2(infoid);
-- select * from table

-- create database ankit;
-- use ankit;

-- create table table1 (id int not null auto_increment primary key,name varchar(55) not null);
-- create table table2 (vid int not null auto_increment,age int not null, primary key(vid)) ;
-- alter table table2 add column userid int(55);
-- alter table table2 add foreign key(userid) references table1(id);
-- drop table table2;
-- drop database ankit;

-- create database ankit;
-- use ankit;
-- create table table1 (id int not null auto_increment primary key,name varchar(55) not null);
-- create table table2 (vid int not null auto_increment,age int not null, primary key(vid)) ;
-- select * from table2

-- describe table2
-- show columns from users
-- create table s2 (id int,created TIMESTAMP DEFAULT CURRENT_TIMESTAMP() )
-- insert into s2(id) values(1);
